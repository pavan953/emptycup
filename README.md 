<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EmptyCup - Interior Design Studio Listings</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        code, pre {
            background-color: #f5f5f5;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-family: 'Courier New', Courier, monospace;
        }
        code {
            padding: 2px 4px;
        }
        pre {
            padding: 10px;
            overflow-x: auto;
        }
        h1, h2, h3 {
            color: #2c3e50;
        }
        a {
            color: #3498db;
            text-decoration: none;
        }
        a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <h1>EmptyCup - Interior Design Studio Listings</h1>
    
    <p>A full-stack application that displays interior design studio listings with a React frontend and Python backend.</p>
    
    <h2>Project Overview</h2>
    
    <p>EmptyCup helps users discover and connect with interior design studios by providing a clean, user-friendly interface to browse studio listings, view ratings, and contact information.</p>
    
    <h2>Prerequisites</h2>
    
    <ul>
        <li><a href="https://docs.docker.com/get-docker/">Docker</a></li>
        <li><a href="https://docs.docker.com/compose/install/">Docker Compose</a></li>
    </ul>
    
    <h2>Project Structure</h2>
    
    <pre><code>EmptyCup/
├── client/                 # React frontend
│   ├── src/                # React source code
│   │   ├── Pages/          # Page components
│   │   ├── components/     # Reusable components
│   │   └── assets/         # Icons and images
├── server/                 # Python backend
│   ├── Dockerfile          # Backend Docker configuration
│   ├── app.py              # Main application entry point
│   └── requirements.txt    # Python dependencies
└── docker-compose.yml      # Docker Compose configuration</code></pre>
    
    <h2>Deployment and Running the Application</h2>
    
    <h3>1. Clone the repository</h3>
    
    <pre><code>git clone &lt;repository-url&gt;
cd EmptyCup</code></pre>
    
    <h3>2. Create Docker Compose file</h3>
    
    <p>Create a <code>docker-compose.yml</code> file in the root directory:</p>
    
    <pre><code>version: '3'

services:
  backend:
    build: ./server
    ports:
      - "5000:5000"
    volumes:
      - ./server:/app
    networks:
      - emptycup-network

  frontend:
    build: ./client
    ports:
      - "5173:5173"
    volumes:
      - ./client:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - emptycup-network

networks:
  emptycup-network:
    driver: bridge</code></pre>
    
    <h3>3. Create a Dockerfile for the frontend</h3>
    
    <p>Create a <code>Dockerfile</code> in the <code>client</code> directory:</p>
    
    <pre><code>FROM node:16-alpine

WORKDIR /app

COPY package.json package-lock.json ./
RUN npm install

COPY . .

EXPOSE 5173

CMD ["npm", "run", "dev", "--", "--host", "0.0.0.0"]</code></pre>
    
    <h3>4. Create requirements.txt</h3>
    
    <p>If not already present, create a <code>requirements.txt</code> file in the server directory:</p>
    
    <pre><code>flask==2.0.1
flask-cors==3.0.10</code></pre>
    
    <h3>5. Build and run with Docker Compose</h3>
    
    <pre><code># Build and start all containers
docker-compose up --build

# Run in detached mode
docker-compose up -d --build</code></pre>
    
    <h3>6. Access the application</h3>
    
    <ul>
        <li>Frontend: <a href="http://localhost:5173">http://localhost:5173</a></li>
        <li>Backend API: <a href="http://localhost:5000/api">http://localhost:5000/api</a></li>
    </ul>
    
    <h3>7. Stop the application</h3>
    
    <pre><code>docker-compose down</code></pre>
    
    <h2>Development</h2>
    
    <h3>Making changes</h3>
    
    <ul>
        <li>Frontend changes will automatically be reflected due to the volume mapping and hot-reloading</li>
        <li>Backend changes may require restarting the container:
            <pre><code>docker-compose restart backend</code></pre>
        </li>
    </ul>
    
    <h3>View logs</h3>
    
    <pre><code># View all logs
docker-compose logs -f

# View specific service logs
docker-compose logs -f backend
docker-compose logs -f frontend</code></pre>
    
    <h2>Troubleshooting</h2>
    
    <h3>CORS Issues</h3>
    
    <p>If you encounter CORS errors, ensure the backend has the proper CORS headers configured in <code>app.py</code>.</p>
    
    <h3>Container Networking</h3>
    
    <p>If the frontend cannot connect to the backend, check that you're using the correct URL:</p>
    <ul>
        <li>Inside Docker network: <code>http://backend:5000/api</code></li>
        <li>From browser: <code>http://localhost:5000/api</code></li>
    </ul>
    
    <h2>License</h2>
    
    <p>This project is licensed under the MIT License - see the LICENSE file for details.</p>
</body>
</html>